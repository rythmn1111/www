---
import Layout from '../../layouts/Layout.astro'
import ReleaseNoteItem from '../../components/ReleaseNoteItem.astro'
import { releaseNotes, releaseNotesTwilight } from '../../release-notes'
import Description from '../../components/Description.astro'
import Button from '../../components/Button.astro'
import { Modal, ModalBody, ModalHeader } from 'free-astro-components'
import { ArrowUp } from 'lucide-astro'
---

<Layout title="Release Notes - AURA">
  <main
    class="flex h-full min-h-[1000px] flex-1 flex-col items-center justify-center py-4"
  >
    <div
      id="release-notes"
      class="py-42 flex min-h-screen flex-col justify-center px-10 lg:px-10 xl:px-10 2xl:w-3/5"
    >
      <Description class="mt-48 text-4xl font-bold">Release Notes</Description>
      <p class="text-base opacity-55">
        Stay up to date with the latest changes to AURA! Since the <a
          class="zen-link"
          href="#1.0.0-a.1">first release</a
        > till <a class="zen-link" href={`#${releaseNotes[0].version}`}
          >{releaseNotes[0].version}</a
        >, we've been working hard to make AURA the best it can be.
        Thanks everyone for your feedback! ❤️
      </p>
      <div
        class="mx-auto mt-8 flex w-fit flex-col gap-4 sm:mr-0 sm:flex-row sm:items-center"
      >
        <Button class="flex" isPrimary href="/donate">
          Give us some support!
        </Button>
        <Button id="toggle-notes" class="flex" data-open="false" href="#">
          Expand all
        </Button>
        <Button id="navigate-to-version" href="#" class="flex">
          Navigate to version...
        </Button>
      </div>
      {
        releaseNotesTwilight.features.length ||
        releaseNotesTwilight.fixes.length ? (
          <ReleaseNoteItem {...releaseNotesTwilight} isTwilight />
        ) : null
      }
      {releaseNotes.map((notes: any) => <ReleaseNoteItem {...notes} />)}
    </div>
  </main>
  <Button
    href="#"
    id="scroll-top"
    isPrimary
    class="fixed bottom-8 right-8"
  >
    <p class="items-center gap-2 sm:flex">
      Back to the top <ArrowUp aria-hidden="true" class="size-4" />
    </p>
    <ArrowUp aria-label="Back to the top" class="size-4 sm:hidden" />
  </Button>
</Layout>
<Modal id="version-modal" class="m-auto border !bg-paper border-[--zen-dark]">
  <ModalHeader class="border-b border-[--zen-dark]">
    <p class="text-4xl font-bold text-dark">Choose version</p>
  </ModalHeader>
  <ModalBody>
    <div id="version-list" class="flex flex-col gap-2 text-xl text-dark">
      {
        releaseNotes.map((note) => (
          <button
            aria-label={`Navigate to version ${note.version}`}
            class="w-full text-left transition-colors duration-150 hover:text-coral"
            data-version={note.version}
          >
            {note.version}
          </button>
        ))
      }
    </div>
  </ModalBody>
</Modal>
<script>
  import { openModal, closeModal } from 'free-astro-components'

  const scrollTopButton = document.getElementById('scroll-top')
  const toggleButton = document.getElementById('toggle-notes')
  const versionButton = document.getElementById('navigate-to-version')
  const container = document.getElementById('release-notes')
  const modal = document.getElementById('version-modal')
  const versionList = document.getElementById('version-list')

  const toggleScrollButton = () => {
    if (!scrollTopButton || !versionButton) return

    const descriptionPosition = versionButton.getBoundingClientRect().bottom
    if (descriptionPosition < 0) {
      scrollTopButton.classList.remove('hidden')
      scrollTopButton.classList.add('block')
    } else {
      scrollTopButton.classList.remove('block')
      scrollTopButton.classList.add('hidden')
    }
  }

  const toggleNotes = () => {
    if (!toggleButton || !container) return

    const accordionItems = container.getElementsByTagName('details')
    const isOpen = toggleButton.getAttribute('data-open') === 'true'

    Array.from(accordionItems).forEach((accordionItem) => {
      if (isOpen) {
        accordionItem.removeAttribute('open')
      } else {
        accordionItem.setAttribute('open', '')
      }
    })

    toggleButton.setAttribute('data-open', (!isOpen).toString())
    toggleButton.textContent = isOpen ? 'Expand all' : 'Collapse all'
  }

  const navigateToVersion = (e: MouseEvent) => {
    const target = e.target as HTMLElement
    if (!container || !target?.closest('[data-version]')) return

    const version = target.getAttribute('data-version')
    if (!version) return
    window.location.hash = version

    const versionDetails = document
      .getElementById(version)
      ?.getElementsByTagName('details')
    if (versionDetails && versionDetails.length > 0) {
      Array.from(versionDetails).forEach((accordion) => {
        accordion.setAttribute('open', '')
      })
    }

    closeModal(modal)
  }

  const openVersionModal = () => {
    if (!modal) return
    openModal(modal)
  }

  window.addEventListener('scroll', toggleScrollButton)
  toggleButton?.addEventListener('click', toggleNotes)
  versionButton?.addEventListener('click', openVersionModal)
  versionList?.addEventListener('click', navigateToVersion)
</script>

<style is:global>
  #version-modal > * {
    font-family: 'Bricolage Grotesque', sans-serif !important;
  }
</style>